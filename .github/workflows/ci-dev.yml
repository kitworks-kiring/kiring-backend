# .github/workflows/ci-dev.yml

name: Deploy Spring Boot App to EC2 (for Development Branch)

on:
  push:
    branches: [ "server_develop" ]

jobs:
  build-and-push-to-dockerhub-dev:
    name: Build and Push Dev Image to Docker Hub
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.define_image.outputs.image }} # ✅ 스텝의 출력을 Job의 최종 출력으로 명시

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Define and Push Image
        id: define_image # 스텝 ID
        run: |
          IMAGE_NAME="xoals6536/kiring-api:dev"
          echo "Building and pushing image: $IMAGE_NAME"
          
          # Jib을 사용하여 빌드 및 푸시
          ./gradlew :core:core-api:jib \
            -Djib.to.image=$IMAGE_NAME \
            -Djib.container.environment=SPRING_PROFILES_ACTIVE=dev
          
          # ✅ 스텝의 출력으로 이미지 이름을 설정
          echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

  deploy-to-ec2-dev:
    name: Deploy to EC2 for Development
    needs: build-and-push-to-dockerhub-dev # 이전 Job을 참조
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/server_develop'

    steps:
      - name: Deploy Dev instance to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # ✅ 이전 Job의 'outputs.image_name'을 직접 셸 변수에 할당
            IMAGE_TO_PULL="${{ needs.build-and-push-to-dockerhub-dev.outputs.image_name }}"
            
            # 변수가 비어있는지 다시 확인
            if [ -z "$IMAGE_TO_PULL" ]; then
              echo "::error::Docker image name was not passed correctly."
              exit 1
            fi

            echo "Pulling latest dev image from Docker Hub: $IMAGE_TO_PULL"
            sudo docker pull $IMAGE_TO_PULL

            echo "Stopping and removing old dev container (if exists)"
            sudo docker stop kiring-app-dev || true
            sudo docker rm kiring-app-dev || true

            echo "Running new dev container..."
            sudo docker run -d \
              -p 8081:8080 \
              --name kiring-app-dev \
              --network kiring-net \
              -e SPRING_PROFILES_ACTIVE=dev \
              -e SPRING_DATA_REDIS_HOST=kiring-redis \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -v /home/ubuntu/kiring-api/logs-dev:/app/logs \
              -e TZ=Asia/Seoul \
              --restart unless-stopped \
              $IMAGE_TO_PULL

            echo "Cleaning up old Docker images (optional)"
            sudo docker image prune -af