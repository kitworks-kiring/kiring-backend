plugins {
    id 'java-library'
    id 'org.springframework.boot' apply(false)
    id 'io.spring.dependency-management'
    id 'io.spring.javaformat' apply(false)
    id 'org.asciidoctor.jvm.convert' apply(false)
}

apply from: 'lint.gradle'

allprojects {
    group = "${projectGroup}"
    version = "${applicationVersion}"
    sourceCompatibility = project.javaVersion

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.asciidoctor.jvm.convert'
    
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersion}"
        }
    }

    dependencies {
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        // Hibernate Spatial (JPA 공간 데이터 타입 지원)
        implementation 'org.hibernate.orm:hibernate-spatial:6.5.2.Final' // Hibernate 6 버전에 맞는 버전 사용
        // JTS (Java Topology Suite) Core - Point, Polygon 등 공간 데이터 객체 제공
        implementation 'org.locationtech.jts:jts-core:1.19.0'
    }

    // 'storage:db-core' 모듈에만 QueryDSL 의존성 및 설정 적용
    if (project.name == 'db-core') {
        apply plugin: 'java-library'

        dependencies {
            // QueryDSL JPA 및 Annotation Processor 추가
            implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
            annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
            annotationProcessor "jakarta.annotation:jakarta.annotation-api"
            annotationProcessor "jakarta.persistence:jakarta.persistence-api"
        }

        // Q-Type 클래스가 생성될 디렉토리 설정
        def generatedDir = 'src/main/generated'

        // sourceSets에 생성된 Q-Type 경로 추가
        sourceSets {
            main {
                java {
                    srcDirs += [ generatedDir ]
                }
            }
        }

        // gradle clean 시 generated 디렉토리 삭제
        clean {
            delete file(generatedDir)
        }
    }

    bootJar.enabled = false
    jar.enabled = true

    test {
        useJUnitPlatform {
            excludeTags('develop', 'restdocs')
        }
    }

    tasks.register('unitTest', Test) {
        group = 'verification'
        useJUnitPlatform {
            excludeTags('develop', 'context', 'restdocs')
        }
    }

    tasks.register('contextTest', Test) {
        group = 'verification'
        useJUnitPlatform {
            includeTags('context')
        }
    }

    tasks.register('restDocsTest', Test) {
        group = 'verification'
        useJUnitPlatform {
            includeTags('restdocs')
        }
    }

    tasks.register('developTest', Test) {
        group = 'verification'
        useJUnitPlatform {
            includeTags('develop')
        }
    }

    tasks.named('asciidoctor') {
        dependsOn restDocsTest
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters"
    }

}